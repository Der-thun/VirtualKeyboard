/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/assets/styles/style.css":
/*!*************************************!*\
  !*** ./src/assets/styles/style.css ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://virtual_keyboard/./src/assets/styles/style.css?");

/***/ }),

/***/ "./src/assets/js/keyboard.js":
/*!***********************************!*\
  !*** ./src/assets/js/keyboard.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Keyboard\": () => (/* binding */ Keyboard)\n/* harmony export */ });\n\r\nclass Keyboard  {\r\n\r\n    elements = {\r\n        main: null,\r\n        keysContainer : null,\r\n        title: null,\r\n        textarea: null,\r\n        description: null,\r\n        language: null,\r\n        keys: []\r\n    }\r\n\r\n    events = {\r\n        oninput: null,\r\n        onclose: null\r\n    }\r\n\r\n    properties = {\r\n        value: '',\r\n        capsLock: false,\r\n        shift: false,\r\n        shiftReal: false,\r\n        alt: false,\r\n        altReal: false,\r\n        ctrl: false,\r\n        ctrlReal: false,\r\n        currentLanguage: 'ru',\r\n        dictRu: [\r\n            'ё', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace',\r\n            'Tab', 'й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ', \"\\\\\", 'Del',\r\n            'CapsLock', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э', 'Enter',\r\n            'ShiftL', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', '.', '▲', 'ShiftR',\r\n            'CtrlL', 'Win', 'AltL', 'Space', 'AltR', '◄', '▼', '►', 'CtrlR'\r\n        ],\r\n\r\n        dictRuShiftFirstLine: {\r\n            0: 'Ё', 1: '!', 2: '\"', 3: '№', 4: ';', 5: '%', 6: ':', 7: '?', 8: '*', 9: '(', 10: ')', 11: '_', 12: '+', 27: '/', 52: ','\r\n        },\r\n\r\n        dictEn: [\r\n            \"`\", '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 'Backspace',\r\n            'Tab', 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', \"\\\\\", 'Del',\r\n            'CapsLock', \"a\", \"s\", \"d\", 'f', 'g', 'h', 'j', 'k', 'l', ';', \"'\", 'Enter', \r\n            'ShiftR', 'z', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '/',  '▲', 'ShiftL',\r\n            'CtrlR', 'Win', 'AltR', 'Space', 'AltL', '◄', '▼', '►', 'CtrlL'\r\n        ],\r\n\r\n        dictEnShiftFirstLine: {\r\n            0: '~', 1: '!', 2: '@', 3: '#', 4: '$', 5: '%', 6: '^', 7: '&', 8: '*', 9: '(', 10: ')', 11: '_', 12: '+', 25: '{', 26: '}', 27: '/', 39: ':', 40: '\"', 50: '<', 51: '>', 52: '?'\r\n        },\r\n\r\n\r\n        unToggledKeys: [\r\n            'backspace', 'tab', 'del', 'capslock', 'enter', 'shift', 'ctrl', 'win', 'alt', 'space'\r\n        ],\r\n\r\n        whichKeyRU: {\r\n            220: 'ё', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5', 54: '6', 55: '7', 56: '8', 57: '9', 48: '0', 187: '-', 219: '=',\r\n            81: 'й', 87: 'ц', 69: 'у', 82: 'к', 84: 'е', 89: 'н', 85: 'г', 73: 'ш', 79: 'щ', 80: 'з', 221: 'х', 186: 'ъ', 191: '\\\\',\r\n            65: 'ф', 83: 'ы', 68: 'в', 70: 'а', 71: 'п', 72: 'р', 74: 'о', 75: 'л', 76: 'д', 192: 'ж', 222: 'э',\r\n            90: 'я', 88: 'ч', 67: 'с', 86: 'м', 66: 'и', 78: 'т', 77: 'ь', 188: 'б', 190: 'ю', 189: '.', 38: '▲',\r\n            37: '◄', 40: '▼', 39: '►',\r\n        },\r\n\r\n        whichKeyEN: {\r\n            220: '`', 49: '1', 50: '2', 51: '3', 52: '4', 53: '5', 54: '6', 55: '7', 56: '8', 57: '9', 48: '0', 187: '-', 219: '=',\r\n            81: 'q', 87: 'w', 69: 'e', 82: 'r', 84: 't', 89: 'y', 85: 'u', 73: 'i', 79: 'o', 80: 'p', 221: '[', 186: ']', 191: '\\\\',\r\n            65: 'a', 83: 's', 68: 'd', 70: 'f', 71: 'g', 72: 'h', 74: 'j', 75: 'k', 76: 'l', 192: ';', 222: \"'\",\r\n            90: 'z', 88: 'x', 67: 'c', 86: 'v', 66: 'b', 78: 'n', 77: 'm', 188: ',', 190: '.', 189: '/', 38: '▲',\r\n            37: '◄', 40: '▼', 39: '►',\r\n        },\r\n\r\n        codeKey: {            \r\n            Backspace: 'Backspace',\r\n            Tab: 'Tab',  \r\n            Delete: 'Del',\r\n            CapsLock: 'CapsLock',  \r\n            Enter: 'Enter',\r\n            ShiftLeft: 'Shift',  \r\n            ArrowUp: 'Up',\r\n            ShiftRight: 'Shift',\r\n            ControlLeft: 'Ctrl',\r\n            MetaLeft: 'Win',\r\n            AltLeft: 'Alt',\r\n            Space: 'Space',\r\n            AltRight: 'Alt',\r\n            ArrowLeft: 'Left',\r\n            ArrowDown: 'Down',\r\n            ControlRight: 'Ctrl'\r\n        },\r\n\r\n    }\r\n\r\n    init() {\r\n        this.getLocalStorage()\r\n        this.elements.main = document.createElement('div');\r\n        this.elements.title = document.createElement('h1');\r\n        this.elements.textarea = document.createElement('textarea');\r\n        this.elements.keysContainer = document.createElement('div');\r\n        this.elements.description = document.createElement('p');\r\n        this.elements.language = document.createElement('p');\r\n\r\n        this.elements.main.classList.add('wrapper');\r\n        this.elements.title.classList.add('title');\r\n        this.elements.title.innerText = 'RSS Virtual Keyboard';\r\n        this.elements.textarea.classList.add('input');\r\n        this.elements.textarea.autofocus = true;\r\n        this.elements.textarea.addEventListener('blur', () => {\r\n            this.elements.textarea.focus();\r\n          });        \r\n        this.elements.keysContainer.classList.add('keyboard');\r\n        this.elements.keysContainer.appendChild(this._createKeys(this.properties.currentLanguage));\r\n        this.elements.keys = this.elements.keysContainer.querySelectorAll('.key');\r\n\r\n        this.elements.description.classList.add('description');\r\n        this.elements.description.innerText = 'Клавиатура создана в операционной системе Windows'\r\n        this.elements.language.classList.add('language');\r\n        this.elements.language.innerText = 'Для переключения языка комбинация: левыe ctrl + alt'\r\n\r\n        this.elements.main.appendChild(this.elements.title);\r\n        this.elements.main.appendChild(this.elements.textarea);\r\n        this.elements.main.appendChild(this.elements.keysContainer);\r\n        this.elements.main.appendChild(this.elements.description);\r\n        this.elements.main.appendChild(this.elements.language);\r\n        document.body.appendChild(this.elements.main);\r\n\r\n        this._keyPress();\r\n    }\r\n\r\n    _createKeys(lang) {\r\n        console.log(lang)\r\n        const fragment = document.createDocumentFragment();\r\n        let dict = (lang === 'ru') ? this.properties.dictRu : this.properties.dictEn\r\n        //console.log(dict)\r\n        dict.forEach(elem => {\r\n            const keyElement = document.createElement('button');\r\n            keyElement.setAttribute(\"type\", \"button\");\r\n            keyElement.classList.add('key');\r\n            keyElement.textContent = elem;\r\n            \r\n            switch(elem) {\r\n                case 'Backspace': \r\n                    keyElement.classList.add('back');\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._backspaceKeyPress();                        \r\n                    });\r\n                    if (this.properties.shift) {\r\n                        this._shift()\r\n                    }\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'Tab':\r\n                    keyElement.classList.add('m');\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._tabKeyPress();                        \r\n                    });\r\n                    if (this.properties.shift) {\r\n                        this._shift()\r\n                    }\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'CapsLock':\r\n                    keyElement.classList.add('xl', 'caps-acvivalible', 'caps');\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._toggleCaps();\r\n                        keyElement.classList.toggle('caps-active');                   \r\n                    });\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'Enter':\r\n                    keyElement.classList.add('xxl');\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._enterKeyPress();\r\n                        \r\n                    });\r\n                    if (this.properties.shift) {\r\n                        this._shift()\r\n                    }\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'ShiftL':\r\n                    keyElement.classList.add('xl', 'shiftleft');\r\n                    keyElement.textContent = 'Shift';\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._shift();                        \r\n                    });\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'ShiftR':\r\n                    keyElement.classList.add('xl', 'shiftright');\r\n                    keyElement.textContent = 'Shift';\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._shift();                        \r\n                    });\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'CtrlL':\r\n                    keyElement.classList.add('l', 'ctrlleft');\r\n                    keyElement.textContent = 'Ctrl';\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._ctrlKeyPress();\r\n                        this._changeLanguage()                        \r\n                    });\r\n                    \r\n                    break;\r\n                case 'CtrlR':\r\n                    keyElement.classList.add('l', 'ctrlright');\r\n                    keyElement.textContent = 'Ctrl';                    \r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'Win':\r\n                    keyElement.classList.add('l');\r\n                    break;\r\n                case 'AltL':\r\n                    keyElement.classList.add('l', 'altleft');\r\n                    keyElement.textContent = 'Alt';\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._altKeyPress();\r\n                        this._changeLanguage()                        \r\n                    });\r\n                    \r\n                    break;\r\n                case 'AltR':\r\n                    keyElement.classList.add('l', 'altright');\r\n                    keyElement.textContent = 'Alt';\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'Space':\r\n                    keyElement.classList.add('space');\r\n\r\n                    keyElement.addEventListener('click', () => {\r\n                        this._spaceKeyPress();                        \r\n                    });\r\n                    if (this.properties.shift) {\r\n                        this._shift()\r\n                    }\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                case 'Del':    \r\n                    keyElement.addEventListener('click', () => {\r\n                        this._delKeyPress();\r\n                    });\r\n                    if (this.properties.shift) {\r\n                        this._shift()\r\n                    }\r\n                    if (this.properties.alt) {\r\n                        this._altKeyPress()\r\n                    }\r\n                    if (this.properties.ctrl) {\r\n                        this._ctrlKeyPress()\r\n                    }\r\n                    break;\r\n                default:\r\n                    keyElement.addEventListener('click', (e) => {\r\n                        this._defaultKeyPress(e);\r\n                        if (this.properties.shift) {\r\n                            this._shift()\r\n                        }\r\n                        if (this.properties.alt) {\r\n                            this._altKeyPress()\r\n                        }\r\n                        if (this.properties.ctrl) {\r\n                            this._ctrlKeyPress()\r\n                        }                        \r\n                    });\r\n            }\r\n            this.elements.keysContainer.appendChild(keyElement);\r\n        });\r\n\r\n        return fragment\r\n    }\r\n\r\n    _defaultKeyPress(event) {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        let whichKey = (this.properties.currentLanguage === 'ru') ? this.properties.whichKeyRU : this.properties.whichKeyEN\r\n        let letter = event.target.classList.contains('key') ? event.target.textContent : (this.properties.capsLock ? whichKey[event.which].toUpperCase() :  whichKey[event.which].toLowerCase() )\r\n       \r\n        if (text.length + 1 !== position) {\r\n            this.properties.value = text.slice(0, position) + letter + text.slice(positionEnd);\r\n        } else {\r\n            this.properties.value += letter;\r\n        }\r\n        textarea.value = this.properties.value;\r\n        textarea.setSelectionRange(position + 1, position + 1);      \r\n        \r\n    }\r\n\r\n    _backspaceKeyPress() {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        \r\n        if (position === positionEnd) {\r\n            \r\n            \r\n            if (text.length === position) {\r\n                this.properties.value = text.slice(0, text.length - 1);\r\n            } else {\r\n                this.properties.value = text.slice(0, position - 1) + text.slice(positionEnd)                \r\n            }\r\n            textarea.value = this.properties.value;\r\n            textarea.setSelectionRange(position - 1, position - 1);\r\n\r\n        } else {\r\n            this.properties.value = text.slice(0, position) + text.slice(positionEnd);\r\n            textarea.value = this.properties.value;\r\n            textarea.setSelectionRange(position, position);\r\n\r\n        }\r\n    }\r\n\r\n    _delKeyPress() {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        \r\n        if (position === positionEnd) {\r\n            \r\n            \r\n            if (position === 0) {\r\n                this.properties.value = text.slice(1);\r\n            } else {\r\n                this.properties.value = text.slice(0, position) + text.slice(positionEnd + 1)                \r\n            }\r\n            textarea.value = this.properties.value;\r\n            textarea.setSelectionRange(position, position);\r\n\r\n        } else {\r\n            this.properties.value = text.slice(0, position) + text.slice(positionEnd);\r\n            textarea.value = this.properties.value;\r\n            textarea.setSelectionRange(position, position);\r\n\r\n        }\r\n    }\r\n\r\n    _enterKeyPress() {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        \r\n       \r\n        if (text.length + 1 !== position) {\r\n            this.properties.value = text.slice(0, position) + '\\n' + text.slice(positionEnd);\r\n        } else {\r\n            this.properties.value += letter;\r\n        }\r\n        textarea.value = this.properties.value;\r\n        textarea.setSelectionRange(position + 1, position + 1);\r\n    }\r\n\r\n    _spaceKeyPress() {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        \r\n       \r\n        if (text.length + 1 !== position) {\r\n            this.properties.value = text.slice(0, position) + ' ' + text.slice(positionEnd);\r\n        } else {\r\n            this.properties.value += letter;\r\n        }\r\n        textarea.value = this.properties.value;\r\n        textarea.setSelectionRange(position + 1, position + 1);\r\n        \r\n    }\r\n\r\n    _tabKeyPress() {\r\n        let textarea = document.querySelector('.input');\r\n        let position = textarea.selectionStart;\r\n        let positionEnd = textarea.selectionEnd;\r\n        let text = this.properties.value;\r\n        \r\n       \r\n        if (text.length + 1 !== position) {\r\n            this.properties.value = text.slice(0, position) + '    ' + text.slice(positionEnd);\r\n        } else {\r\n            this.properties.value += letter;\r\n        }\r\n        textarea.value = this.properties.value;\r\n        textarea.setSelectionRange(position + 4, position + 4);\r\n    }\r\n\r\n    _altKeyPress() {\r\n        this.properties.alt = !this.properties.alt\r\n    }\r\n\r\n    _ctrlKeyPress() {\r\n        this.properties.ctrl = !this.properties.ctrl\r\n        \r\n    }\r\n\r\n    _shift() {  \r\n        this.properties.shift = !this.properties.shift;\r\n        \r\n        if (this.properties.currentLanguage === 'ru') {\r\n            for (let i in this.properties.dictRuShiftFirstLine)  {            \r\n                if (this.elements.keys[i].textContent === this.properties.dictRu[i]) {\r\n                    this.elements.keys[i].textContent = this.properties.dictRuShiftFirstLine[i];\r\n                } else {\r\n                    this.elements.keys[i].textContent = this.properties.dictRu[i];\r\n                }       \r\n            }\r\n            \r\n            this._toggleCaps()\r\n        } else {\r\n            for (let i in this.properties.dictEnShiftFirstLine)  {            \r\n                if (this.elements.keys[i].textContent === this.properties.dictEn[i]) {\r\n                    this.elements.keys[i].textContent = this.properties.dictEnShiftFirstLine[i];\r\n                } else {\r\n                    this.elements.keys[i].textContent = this.properties.dictEn[i];\r\n                }       \r\n            }\r\n            \r\n            this._toggleCaps()            \r\n        }\r\n        \r\n    }\r\n\r\n    _input(type) {\r\n        switch(type) {\r\n            case 'write': document.querySelector('.input').value = this.properties.value; break;\r\n            case 'read': this.properties.value = document.querySelector('.input').value; break;\r\n        }\r\n    }\r\n\r\n    _toggleCaps() {   \r\n            \r\n        this.properties.capsLock = !this.properties.capsLock;\r\n        this.elements.keys.forEach(key => {              \r\n            if (!this.properties.unToggledKeys.includes(key.innerText.toLowerCase())) {               \r\n                key.textContent = this.properties.capsLock ? key.innerText.toUpperCase() : key.innerText.toLowerCase();\r\n            }\r\n        })        \r\n    }\r\n\r\n\r\n    _keyPress() {        \r\n        document.querySelector('.input').addEventListener('keydown', (e) => {\r\n            e.preventDefault();\r\n            let keysSet = document.querySelectorAll('.key');\r\n            let whichKey = (this.properties.currentLanguage === 'ru') ? this.properties.whichKeyRU : this.properties.whichKeyEN\r\n            keysSet.forEach(elem => {\r\n                if (this.properties.codeKey[e.code] === elem.textContent) {\r\n                    switch (elem.textContent) {\r\n                        case \"Space\": this._spaceKeyPress(); elem.classList.add('active'); break;\r\n                        case 'Backspace': this._backspaceKeyPress(); elem.classList.add('active'); break;\r\n                        case \"Enter\" : this._enterKeyPress(); elem.classList.add('active'); break;\r\n                        case 'Shift':\r\n                            if (e.code === 'ShiftLeft') {\r\n                                document.querySelector('.shiftleft').classList.add('active');                                \r\n                                \r\n                            } else {\r\n                                document.querySelector('.shiftright').classList.add('active');                                \r\n                                \r\n                            }\r\n                            if (!this.properties.shiftReal) {\r\n                                this.properties.shiftReal = true;\r\n                                this._shift()                                \r\n                            }\r\n                            \r\n                            break;\r\n                        case 'CapsLock': \r\n                            this._toggleCaps();\r\n                            elem.classList.toggle('caps-active');\r\n                            elem.classList.add('active'); \r\n                            break;\r\n                        case 'Tab': this._tabKeyPress(); elem.classList.add('active');break;\r\n                        case 'Ctrl': \r\n                            if (e.code === 'ControlLeft') {                                \r\n                                document.querySelector('.ctrlleft').classList.add('active');\r\n                                if (!this.properties.ctrlReal) {\r\n                                    this.properties.ctrlReal = true;\r\n                                    this._changeLanguage()                                \r\n                                }                             \r\n                            } else {\r\n                                document.querySelector('.ctrlright').classList.add('active');\r\n                            }\r\n                                                   \r\n                        \r\n                        \r\n                            this._ctrlKeyPress();  break;\r\n                        case 'Win': elem.classList.add('active'); break;\r\n                        case 'Alt': \r\n                            if (e.code === 'AltLeft') {\r\n                                document.querySelector('.altleft').classList.add('active');\r\n                                if (!this.properties.altReal) {\r\n                                    this.properties.altReal = true;\r\n                                    this._changeLanguage()                            \r\n                                }                             \r\n                            } else {\r\n                                document.querySelector('.altright').classList.add('active');\r\n                            }                       \r\n                            \r\n                            this._altKeyPress(); \r\n                            break;\r\n                        case 'Del': this._delKeyPress(); elem.classList.add('active'); break;\r\n                        default: break;\r\n                    }\r\n                    \r\n                } else if (elem.textContent.toLowerCase() === whichKey[e.which]) {                    \r\n                    this._defaultKeyPress(e);\r\n                    elem.classList.add('active')\r\n                } \r\n            })\r\n        })\r\n\r\n        document.querySelector('.input').addEventListener('keyup', (e) => {\r\n            let keysSet = document.querySelectorAll('.key');\r\n            let whichKey = (this.properties.currentLanguage === 'ru') ? this.properties.whichKeyRU : this.properties.whichKeyEN\r\n            keysSet.forEach(elem => {\r\n                if (this.properties.codeKey[e.code] === elem.textContent) {\r\n                    elem.classList.remove('active');\r\n                    if (this.properties.shift) {                               \r\n                        this._shift();\r\n                        this.properties.shiftReal = false\r\n                    }\r\n                    this.properties.altReal = false\r\n                    this.properties.ctrlReal = false\r\n                    \r\n                } else if (elem.textContent.toLowerCase() === whichKey[e.which]) {\r\n                   \r\n                    elem.classList.remove('active')\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    _changeLanguage() {\r\n        if ((this.properties.alt && this.properties.ctrl) || (this.properties.altReal && this.properties.ctrlReal)) {\r\n            if (this.properties.currentLanguage === 'ru') {\r\n                for (let i = 0; i < this.elements.keys.length; i++) {\r\n                    let element = this.elements.keys[i].textContent.toLowerCase() \r\n                    if (!this.properties.unToggledKeys.includes(element)) {\r\n                        this.elements.keys[i].textContent = this.properties.capsLock ? this.properties.dictEn[i].toUpperCase() : this.properties.dictEn[i]\r\n                    }                \r\n                    \r\n                }\r\n                this.properties.currentLanguage = 'en'\r\n            } else {\r\n                for (let i = 0; i < this.elements.keys.length; i++) { \r\n                    let element = this.elements.keys[i].textContent.toLowerCase() \r\n                    if (!this.properties.unToggledKeys.includes(element))  {               \r\n                        this.elements.keys[i].textContent = this.properties.capsLock ? this.properties.dictRu[i].toUpperCase() : this.properties.dictRu[i]\r\n                    }\r\n                }\r\n                this.properties.currentLanguage = 'ru'            \r\n            }\r\n            this.setLocalStorage()\r\n            this.properties.alt = false\r\n            this.properties.ctrl = false\r\n            this.properties.altReal = false\r\n            this.properties.ctrlReal = false\r\n        } \r\n    }\r\n\r\n    setLocalStorage() {\r\n        localStorage.setItem('lang', this.properties.currentLanguage);\r\n    }\r\n\r\n    getLocalStorage() {\r\n        if(localStorage.getItem('lang')) {\r\n          this.properties.currentLanguage = localStorage.getItem('lang');\r\n         // this._createKeys(this.properties.currentLanguage);\r\n        }    \r\n      }\r\n};\r\n\r\n\n\n//# sourceURL=webpack://virtual_keyboard/./src/assets/js/keyboard.js?");

/***/ }),

/***/ "./src/scrypt.js":
/*!***********************!*\
  !*** ./src/scrypt.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _assets_js_keyboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./assets/js/keyboard */ \"./src/assets/js/keyboard.js\");\n/* harmony import */ var _assets_styles_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assets/styles/style.css */ \"./src/assets/styles/style.css\");\n\n\n\n\n// import favicon from './assets/favicon.ico'\n\nconst keyboard = new _assets_js_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard();\n\n\n//window.addEventListener('load', keyboard.getLocalStorage());\nwindow.addEventListener('DOMContentLoaded', () => {\n  keyboard.init();\n});\n//window.addEventListener('beforeunload', keyboard.setLocalStorage());\n\n\n//# sourceURL=webpack://virtual_keyboard/./src/scrypt.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scrypt.js");
/******/ 	
/******/ })()
;